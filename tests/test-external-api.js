#!/usr/bin/env node

/**
 * Teste da Integra√ß√£o com API Externa
 * 
 * Este script testa todos os servi√ßos da API externa:
 * - Configura√ß√£o
 * - Cache
 * - Rate Limiting
 * - Comunica√ß√£o com API externa
 * - Fallback para dados est√°ticos
 */

import externalAPIService from './services/externalAPIService.js';
import jobSearchService from './services/jobSearchService.js';
import cacheService from './services/cacheService.js';
import rateLimitService from './services/rateLimitService.js';
import { EXTERNAL_API_CONFIG, getBaseURL } from './config/externalAPI.js';

console.log('üß™ INICIANDO TESTES DA API EXTERNA\n');

// Fun√ß√£o para aguardar
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Fun√ß√£o para testar configura√ß√£o
async function testConfiguration() {
    console.log('üìã Testando Configura√ß√£o...');

    try {
        console.log(`   Base URL: ${getBaseURL()}`);
        console.log(`   API Key: ${EXTERNAL_API_CONFIG.API_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
        console.log(`   Timeout: ${EXTERNAL_API_CONFIG.TIMEOUT}ms`);
        console.log(`   Retry Attempts: ${EXTERNAL_API_CONFIG.RETRY_ATTEMPTS}`);
        console.log(`   Rate Limit (min): ${EXTERNAL_API_CONFIG.RATE_LIMITS.JOBS_PER_MINUTE}`);
        console.log(`   Rate Limit (dia): ${EXTERNAL_API_CONFIG.RATE_LIMITS.REQUESTS_PER_DAY}`);

        console.log('   ‚úÖ Configura√ß√£o v√°lida\n');
        return true;
    } catch (error) {
        console.log(`   ‚ùå Erro na configura√ß√£o: ${error.message}\n`);
        return false;
    }
}

// Fun√ß√£o para testar cache
async function testCache() {
    console.log('üóÑÔ∏è Testando Cache...');

    try {
        // Testar cache de vagas
        const testData = { test: 'data' };
        cacheService.setJobs('test', 'test-location', 5, testData);

        const cachedData = cacheService.getJobs('test', 'test-location', 5);
        if (cachedData === testData) {
            console.log('   ‚úÖ Cache de vagas funcionando');
        } else {
            console.log('   ‚ùå Cache de vagas com problema');
        }

        // Testar estat√≠sticas
        const stats = cacheService.getStats();
        console.log(`   Cache keys: ${stats.keys}`);
        console.log(`   Cache hits: ${stats.hits}`);
        console.log(`   Cache misses: ${stats.misses}`);

        // Limpar cache de teste
        cacheService.clearJobsCache();

        console.log('   ‚úÖ Cache funcionando corretamente\n');
        return true;
    } catch (error) {
        console.log(`   ‚ùå Erro no cache: ${error.message}\n`);
        return false;
    }
}

// Fun√ß√£o para testar rate limiting
async function testRateLimiting() {
    console.log('‚è±Ô∏è Testando Rate Limiting...');

    try {
        // Verificar estado inicial
        const initialStats = rateLimitService.getStats();
        console.log(`   Estado inicial: ${initialStats.canMakeRequest ? 'Pode fazer requisi√ß√£o' : 'Rate limit atingido'}`);

        // Simular algumas requisi√ß√µes
        for (let i = 0; i < 3; i++) {
            if (rateLimitService.canMakeJobRequest()) {
                rateLimitService.recordJobRequest();
                console.log(`   Requisi√ß√£o ${i + 1} registrada`);
            } else {
                console.log(`   Rate limit atingido na requisi√ß√£o ${i + 1}`);
                break;
            }
        }

        // Verificar estat√≠sticas
        const stats = rateLimitService.getStats();
        console.log(`   Requisi√ß√µes por minuto: ${stats.minute.current}/${stats.minute.limit}`);
        console.log(`   Requisi√ß√µes por dia: ${stats.daily.current}/${stats.daily.limit}`);

        // Resetar para n√£o interferir nos testes
        rateLimitService.resetAll();

        console.log('   ‚úÖ Rate limiting funcionando corretamente\n');
        return true;
    } catch (error) {
        console.log(`   ‚ùå Erro no rate limiting: ${error.message}\n`);
        return false;
    }
}

// Fun√ß√£o para testar conectividade com API externa
async function testExternalAPIConnection() {
    console.log('üåê Testando Conectividade com API Externa...');

    try {
        const result = await externalAPIService.testConnection();

        if (result.success) {
            console.log('   ‚úÖ API externa conectada com sucesso');
            console.log(`   Status: ${result.data?.status || 'N/A'}`);
            console.log(`   Vers√£o: ${result.data?.version || 'N/A'}`);
        } else {
            console.log('   ‚ùå Falha na conex√£o com API externa');
            console.log(`   Erro: ${result.error || 'N/A'}`);
        }

        console.log('   ‚úÖ Teste de conectividade conclu√≠do\n');
        return result.success;
    } catch (error) {
        console.log(`   ‚ùå Erro no teste de conectividade: ${error.message}\n`);
        return false;
    }
}

// Fun√ß√£o para testar busca de vagas
async function testJobSearch() {
    console.log('üîç Testando Busca de Vagas...');

    try {
        // Testar busca via API externa
        const jobs = await jobSearchService.searchJobs('Python', 'Brazil', 3);

        if (jobs.success && jobs.data && jobs.data.length > 0) {
            console.log(`   ‚úÖ ${jobs.data.length} vagas encontradas via ${jobs.source}`);
            console.log(`   Primeira vaga: ${jobs.data[0].titulo} em ${jobs.data[0].empresa}`);
        } else {
            console.log('   ‚ö†Ô∏è Nenhuma vaga encontrada via API externa');
        }

        console.log('   ‚úÖ Teste de busca de vagas conclu√≠do\n');
        return true;
    } catch (error) {
        console.log(`   ‚ùå Erro na busca de vagas: ${error.message}\n`);
        return false;
    }
}

// Fun√ß√£o para testar fallback
async function testFallback() {
    console.log('üîÑ Testando Sistema de Fallback...');

    try {
        // Desativar API externa temporariamente
        const originalState = jobSearchService.useExternalAPI;
        jobSearchService.setExternalAPIUsage(false);

        // Fazer busca (deve usar fallback)
        const jobs = await jobSearchService.searchJobs('Desenvolvedor', 'S√£o Paulo', 2);

        if (jobs.success && jobs.data && jobs.data.length > 0) {
            console.log(`   ‚úÖ ${jobs.data.length} vagas encontradas via fallback`);
            console.log(`   Fonte: ${jobs.source}`);
        } else {
            console.log('   ‚ùå Fallback n√£o funcionou');
        }

        // Restaurar estado original
        jobSearchService.setExternalAPIUsage(originalState);

        console.log('   ‚úÖ Teste de fallback conclu√≠do\n');
        return true;
    } catch (error) {
        console.log(`   ‚ùå Erro no teste de fallback: ${error.message}\n`);
        return false;
    }
}

// Fun√ß√£o para testar estat√≠sticas
async function testStats() {
    console.log('üìä Testando Estat√≠sticas...');

    try {
        const stats = jobSearchService.getUsageStats();

        console.log(`   API Externa ativa: ${stats.useExternalAPI ? 'Sim' : 'N√£o'}`);
        console.log(`   Base URL: ${stats.externalAPI.config.baseURL}`);
        console.log(`   Timeout: ${stats.externalAPI.config.timeout}ms`);

        // Estat√≠sticas de rate limiting
        const rateLimit = stats.externalAPI.rateLimit;
        console.log(`   Rate Limit (min): ${rateLimit.minute.current}/${rateLimit.minute.limit}`);
        console.log(`   Rate Limit (dia): ${rateLimit.daily.current}/${rateLimit.daily.limit}`);

        // Estat√≠sticas de cache
        const cache = stats.externalAPI.cache;
        console.log(`   Cache keys: ${cache.keys}`);
        console.log(`   Cache hits: ${cache.hits}`);
        console.log(`   Cache misses: ${cache.misses}`);

        console.log('   ‚úÖ Estat√≠sticas obtidas com sucesso\n');
        return true;
    } catch (error) {
        console.log(`   ‚ùå Erro ao obter estat√≠sticas: ${error.message}\n`);
        return false;
    }
}

// Fun√ß√£o principal de teste
async function runAllTests() {
    const tests = [
        { name: 'Configura√ß√£o', fn: testConfiguration },
        { name: 'Cache', fn: testCache },
        { name: 'Rate Limiting', fn: testRateLimiting },
        { name: 'Conectividade API Externa', fn: testExternalAPIConnection },
        { name: 'Busca de Vagas', fn: testJobSearch },
        { name: 'Sistema de Fallback', fn: testFallback },
        { name: 'Estat√≠sticas', fn: testStats }
    ];

    const results = [];

    for (const test of tests) {
        try {
            const result = await test.fn();
            results.push({ name: test.name, success: result });
        } catch (error) {
            console.log(`   ‚ùå Erro inesperado no teste ${test.name}: ${error.message}\n`);
            results.push({ name: test.name, success: false, error: error.message });
        }

        // Aguardar um pouco entre os testes
        await wait(1000);
    }

    // Resumo dos resultados
    console.log('üìã RESUMO DOS TESTES\n');
    console.log('='.repeat(50));

    let passed = 0;
    let failed = 0;

    results.forEach(result => {
        const status = result.success ? '‚úÖ PASSOU' : '‚ùå FALHOU';
        console.log(`${status} - ${result.name}`);

        if (result.success) {
            passed++;
        } else {
            failed++;
            if (result.error) {
                console.log(`     Erro: ${result.error}`);
            }
        }
    });

    console.log('='.repeat(50));
    console.log(`Total: ${results.length} | Passou: ${passed} | Falhou: ${failed}`);

    if (failed === 0) {
        console.log('\nüéâ TODOS OS TESTES PASSARAM! A integra√ß√£o est√° funcionando perfeitamente.');
    } else {
        console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima para mais detalhes.');
    }
}

// Executar testes se o arquivo for executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
    runAllTests().catch(error => {
        console.error('‚ùå Erro fatal durante os testes:', error);
        process.exit(1);
    });
}

export { runAllTests }; 